#!/usr/bin/perl -w
#
# mcpst-dump
# John Simpson <jms1@jms1.net> 2022-04-05
#
# Dump (print) the contents of an Elektron Model:Cycles MCPST file.

require 5.005 ;
use strict ;

use File::Temp qw ( tempdir ) ;
use Getopt::Std ;
use JSON ;

my @files       = () ;      # filenames (in original order)
my $f1          = '' ;      # name of first file (makes logic easier)
my %contents    = () ;      # filename => binary blob contents
my $fwidth      = 11 ;      # width of each file's column, min 11

my %opt         = () ;      # getopts()
my $do_debug    = 0 ;       # -d    Show debug messages
my $line_width  = 16 ;      # -w:   Width of lines in hex dump
my $show_loc    = 0 ;       # -l    Show location within file

my @machine_name = qw ( Kick Snare Metal Perc Tone Chord ) ;

my @tone_color_name = qw
(
    0.0125  0.075   0.125   0.250   0.500   0.750   0.900   0.990
    1.000   1.001   1.010   1.100   1.150   1.200   1.250   1.300
    1.400   1.500   1.600   1.750   1.800   1.900   1.980   1.998
    2.000   2.002   2.020   2.100   2.150   2.200   2.250   2.300
    2.400   2.500   2.600   2.750   2.800   2.900   2.970   2.997
    3.000   3.003   3.030   3.100   3.150   3.200   3.250   3.300
    3.400   3.500   3.600   3.750   3.800   3.900   3.960   3.996
    4.000   4.004   4.040   4.100   4.150   4.200   4.250   4.300
    4.400   4.500   4.600   4.750   4.800   4.900   4.950   4.995
    5.000   5.005   5.050   5.100   5.150   5.200   5.250   5.300
    5.400   5.500   5.600   5.750   5.800   5.900   5.940   5.994
    6.000   6.006   6.060   6.100   6.150   6.200   6.250   6.300
    6.400   6.500   6.600   6.750   6.800   6.900   6.930   6.993
    7.000   7.007   7.070   7.100   7.150   7.200   7.250   7.300
    7.400   7.500   7.600   7.750   7.800   7.900   7.920   7.992
    8.000   9.000   10.00   11.00   12.00   13.00   14.00   15.00
) ;

my %chord_color_name =
(
    32  => 'ROOTPOS' ,
    62  => '1ST INV' ,
    74  => '2ND INV' ,
    84  => '3RD INV' ,
) ;

my @chord_shape_name =
(
    '' ,
    'Unison x 2' ,
    'Unison x 3' ,
    'Unison x 4' ,
    'Minor' ,
    'Major' ,
    'sus2' ,
    'sus4' ,
    'm7' ,
    'M7' ,
    'mMaj7' ,
    'Maj7' ,
    '7sus4' ,
    'dim7' ,
    'madd9' ,
    'Madd9' ,
    'm6' ,
    'M6' ,
    'mb5' ,
    'Mb5' ,
    'm7b5' ,
    'M7b5' ,
    'M#5' ,
    'm7#5' ,
    'M7#5' ,
    'mb6' ,
    'm9no5' ,
    'M9no5' ,
    'Madd9b5' ,
    'Maj7b5' ,
    'M7b9no5' ,
    'sus4#5b9' ,
    'sus4add#5' ,
    'Maddb5' ,
    'M6add4no5' ,
    'Maj7/6no5' ,
    'Maj9no5' ,
    'Fourths' ,
    'Fifths' ,
) ;


###############################################################################

sub usage(;$)
{
    my $msg = ( shift || '' ) ;

    print <<EOF ;
$0 [options] input.mcpst

Print the contents of an Elektron Model:Cycles MCPST file.

-w ___  Specify the number of bytes to print on each line of the hex dump.
        Default: 16

-d      Enable debugging messages.

-h      Show this help message.

EOF

    if ( $msg ne '' )
    {
        print $msg ;
        exit 1 ;
    }

    exit 0 ;
}

###############################################################################
#
# Debugging

sub debug(@)
{
    $do_debug && print @_ ;
}

###############################################################################
#
# Print a hex dump

sub hexline($$)
{
    my $offset  = shift ;
    my $bytes   = shift ;

    printf '%04x |' , $offset ;

    my $text = '' ;
    my $len  = length( $bytes ) ;
    for my $pos ( 0 .. ( $line_width - 1 ) )
    {
        unless ( $pos % 4 )
        {
            $pos && print ' ' ;
        }

        my $char = substr( $bytes , $pos , 1 ) ;
        my $cn = ord( $char ) ;
        printf ' %02x' , $cn ;

        if ( ( $cn >= 32 ) && ( $cn <= 126 ) )
        {
            $text .= $char ;
        }
        else
        {
            $text .= '.' ;
        }
    }

    print " | $text\n" ;
}

sub hexdump($)
{
    my $data = shift ;

    my $len = length( $data ) ;
    my $pos = 0 ;
    while ( $pos < $len )
    {
        hexline( $pos , substr( $data , $pos , $line_width ) ) ;
        $pos += $line_width ;
    }
}

###############################################################################
#
# Read a '.mcpst' file (ZIP file) into memory

sub read_mcpst($)
{
    my $infile = shift ;

    ########################################
    # Create work dir

    my $workdir = tempdir( CLEANUP => 1 )
        or die "ERROR: tempdir(): $!\n" ;
    debug "[$infile] \$workdir='$workdir'\n" ;

    ########################################
    # Unzip the file

    my $cmd = "unzip -d '$workdir' '$infile'" ;

    if ( $do_debug )
    {
        print "[$infile] \$cmd='$cmd'\n" ;
        system $cmd ;
    }
    else
    {
        system "$cmd >/dev/null 2>&1" ;
    }

    ########################################
    # Read 'manifest.json'

    open( I , '<' , "$workdir/manifest.json" )
        or die "ERROR: can't read $workdir/manifest.json: $!\n" ;

    my $jt = '' ;
    while ( my $line = <I> )
    {
        $jt .= $line ;
    }
    close I ;

    debug "[$infile] \$jt='$jt'\n" ;

    ########################################
    # Parse the JSON

    my $rj = decode_json( $jt ) ;

    ########################################
    # Make sure the expected elements are present

    my $fv = ( $rj->{'FormatVersion'} || '' ) ;
    unless ( $fv eq '1.0' )
    {
        die "ERROR: [$infile] manifest.json contains unrecognized FormatVersion '$fv' (expecting '1.0')\n" ;
    }

    my $ft = ( $rj->{'FileType'} || '' ) ;
    unless ( $ft eq 'Sound' )
    {
        die "ERROR: [$infile] manifest.json contains unrecognized FileType '$ft' (expecting 'Sound')\n" ;
    }

    my @pt = @{$rj->{'ProductType'}} ;
    my $has_27 = 0 ;
    for my $t ( @pt )
    {
        if ( $t eq '27' )
        {
            $has_27 = 1 ;
            last ;
        }
    }

    unless ( $has_27 )
    {
        die "ERROR: [$infile] manifest.json ProductType list does not contain '27'\n" ;
    }

    my $payload = ( $rj->{'Payload'} || die "ERROR: [$infile] manifest.json does not contain a Payload element\n" ) ;

    ########################################
    # Build the name of the binary file
    # and make sure it exists

    my $binfile = "$workdir/$payload" ;

    unless ( -f $binfile )
    {
        die "ERROR: [$infile] '$binfile' does not exist\n" ;
    }

    ########################################
    # Read the binary file into memory

    open( I , '<' , $binfile )
        or die "ERROR: [$infile] can't read '$binfile': $!\n" ;
    binmode I ;

    my $bin = '' ;
    my $rb = read( I , $bin , 1048576 ) ;
    if ( $rb < 1 )
    {
        die "ERROR: [$infile] read() returned $rb: $!\n" ;
    }
    close I ;

    if ( $rb != 160 )
    {
        print "WARNING: [$infile] payload is $rb bytes, not 160\n" ;
    }

    ########################################
    # Return the contents

    return $bin ;
}

###############################################################################
###############################################################################
###############################################################################
#
# Parse the command line

getopts( 'hdw:l' , \%opt ) ;
$opt{'h'} && usage() ;
$do_debug   = ( $opt{'d'} ? 1 : 0 ) ;
$line_width = ( $opt{'w'} || $line_width ) ;
$show_loc   = ( $opt{'l'} ? 1 : 0 ) ;

########################################
# Do the deed

my $arg = ( shift @ARGV || usage() ) ;

my $text = read_mcpst( $arg ) ;

########################################
# Print a hex dump

hexdump( $text ) ;
print "\n" ;

###############################################################################
#
# Print the items we know about

my @b = split( // , $text ) ;

########################################
# 3c-47: Preset Name - ASCII, ends at first \0 byte

my $name = substr( $text , 0x3c , 12 ) ;
$name =~ s|\0.*|| ;

$show_loc && print "3c-47 " ;
print "Name        \"$name\"\n" ;

########################################
# 5e: Machine - discrete values from 0-5

my $machine = ord( $b[0x5e] ) ;

$show_loc && print "5e    " ;
printf "Machine     %s\n" , ( $machine_name[$machine] || sprintf( '%02x (?)' , $machine ) ) ;

########################################
# Color
# - Tone    discrete values from 0=0.0125 to 127=15.00
# - Chord   0-127, some values have additional labels

my $color = ord( $b[0x62] ) ;

$show_loc && print "62    " ;
print "Color       " ;

if ( 4 == $machine ) # Tone
{
    print $tone_color_name[$color] ;
}
elsif ( 5 == $machine ) # Chord
{
    print $color ;
    if ( exists $chord_color_name{$color} )
    {
        print " $chord_color_name{$color}" ;
    }
}
else
{
    print $color ;
}

print "\n" ;

########################################
# Shape (Tone Shape?) - range 0-127

my $shape = ord( $b[0x64] ) ;

$show_loc && print "64    " ;
printf "Shape       %d\n" , $shape ;

########################################
# Sweep (Tone Sweep?) - range 0-127

my $sweep = ord( $b[0x66] ) ;

$show_loc && print "66    " ;
printf "Sweep       %d\n" , $sweep ;

########################################
# Contour (Tone Contour?) - range 0-127

my $contour = ord( $b[0x68] ) ;

$show_loc && print "68    " ;
printf "Contour     %d\n" , $contour ;

########################################
# 60-61: Pitch - range -24.0 to 24.0, resolution 0.1

my $pitch = sprintf( '%.1d' , ord($b[0x60]) - 0x40 + ( ord($b[0x61]) / 256 ) ) ;

$show_loc && print "60-61 " ;
printf "Pitch        %+1.1f\n" , $pitch ;

########################################
# Decay - range 0-127

my $decay = ord( $b[0x72] ) ;

$show_loc && print "72    " ;
printf "Decay       %d\n" , $decay ;

########################################
# Delay Send - range 0-127, show 0 as "OFF"

my $delay_send = ord( $b[0x76] ) ;

$show_loc && print "76    " ;
printf "Delay Send  %s\n" , ( $delay_send || "OFF" ) ;

########################################
# Reverb Send - range 0-127, show 0 as "OFF"

my $reverb_send = ord( $b[0x78] ) ;

$show_loc && print "78    " ;
printf "Reverb Send %s\n" , ( $reverb_send || "OFF" ) ;
